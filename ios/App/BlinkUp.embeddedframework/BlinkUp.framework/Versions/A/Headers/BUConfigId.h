//
//  BUConfigId.h
//  BlinkUp
//
//  Created by Brett Park on 2014-12-10.
//  Copyright Â© 2020 Twilio, Inc. All rights reserved.
//

#import <Foundation/Foundation.h>

/*!
 *  Identifier of the device configuration session
 *
 *  The ConfigId is used as a unique token that represents a single configuration
 *  of a device. It is created by the Electric Imp servers and should only be
 *  used for a single configuration session. On subsequent configuration attempts
 *  (even on the same device) a new ConfigId should be used.
 */
@interface BUConfigId : NSObject

/*!
 *  @brief  Block called when configuration has been retrieved
 *
 *  @param configId Will return this same object for easier access
 *  @param error    If not nil, the error that has occurred
 */
  typedef void (^BUConfigIdCompletionHandler)(BUConfigId *_Nonnull configId, NSError *_Nullable error);

/*!
 *  @brief  Initialize using a new plan ID
 *
 *   If you are using Swift and want enumerated results, please use the Swift extension method
 *
 *  @param apiKey The API Key assigned to you from Electric Imp
 *  @param completionHandler Block called when the configuration ID is
 *    retrieved from the Electric Imp server. If error is nil, then the ConfigId
 *    has been succesfully activated
 *
 *  @return ConfigId that may or may not be active
 */
- (nonnull instancetype)initWithApiKey:(nonnull NSString *)apiKey completionHandler:(nullable BUConfigIdCompletionHandler)completionHandler;



/**
 @brief **This method should never be used**

 @return Do not use
 */
-(nonnull instancetype)init NS_DESIGNATED_INITIALIZER;

/*!
 *  @brief  Initialize using an existing plan ID
 *
 *   If you are using Swift and want enumerated results, please use the Swift extension method
 *
 *  @param apiKey            The API Key assigned to you from Electric Imp
 *  @param planId            If you are setting the *planId* property, it must be an
 *    existing ID previously generated by Electric Imp
 *  @param completionHandler Block called when the configuration ID is
 *    retrieved from the Electric Imp server. If error is nil, then the ConfigId
 *    has been succesfully activated
 *
 *  @return ConfigId that may or may not be active
 */
- (nonnull instancetype)initWithApiKey:(nonnull NSString *)apiKey planId:(nullable NSString *)planId completionHandler:(nullable BUConfigIdCompletionHandler)completionHandler NS_DESIGNATED_INITIALIZER;


#pragma mark - Properties

/*!
 *  @brief Retrieve the API Key that is used when retrieving the ConfigId
 */
@property (nonatomic, readonly, nullable) NSString *apiKey;

/*!
 *  @brief Retrieve the plan ID that is used for configuring the device
 *
 *   If you are setting the *planId* property, it must be an existing ID previously generated by Electric Imp
 *
 *   @see FAQ for an explanation of what the plan ID is
 */
@property (nonatomic, readonly, nullable) NSString *planId;

/*!
 *  @brief  One-time configuration token
 *
 *  The token is retrieved from the Electric Imp servers and identifies the
 *  short-term configuration transaction between the server and the device
 */
@property (nonatomic, readonly, nonnull) NSString *token;

/*!
 *  @brief  Indicates if the ConfigId has been retrieved from the server
 *
 *  This property is `true` when the ConfigId is ready to be used. If it is `false`
 *  the ID has not been retrieved yet, or there was an error (be sure to check
 *  for error in the initialization methods completion handler)
 */
@property (nonatomic, readonly) BOOL isActive;

@end
