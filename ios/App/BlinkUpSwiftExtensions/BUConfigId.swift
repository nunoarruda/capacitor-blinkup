//
//  BUConfigId.swift
//  BlinkUpSwiftSDK
//
//  Created by Brett Park on 2015-04-27.
//  Copyright Â© 2020 Twilio Inc. All rights reserved.
//

import BlinkUp

extension BUConfigId {
  
  /**
  Swift specific initializer with automatic planId retrieval
  
  :param: apiKey  The APIKey assigned to you from Electric Imp
  :param: handler Closure called when the configuration id is 
    retrieved from the Electric Imp server.
  
  :returns: ConfigId that may or may not be active
  */
  convenience public init(apiKey:String, handler: @escaping (_ response:ConfigIdResponse) -> ()) {
    self.init(apiKey: apiKey, completionHandler: BUConfigId.convertHandlerToObjC(handler))
  }
  
  /**
  Swift specific initializer with existing planId
  
  :param: apiKey  The APIKey assigned to you from Electric Imp
  :param: planId  If setting the planId property, it must be an
    existing Id previously generated by Electric Imp
  :param: handler Closure called when the configuration id is
  retrieved from the Electric Imp server.
  
  :returns: ConfigId that may or may not be active
  */
  convenience public init(apiKey:String, planId:String,handler: @escaping (_ response:ConfigIdResponse) -> ()) {
    self.init(apiKey: apiKey, planId: planId, completionHandler: BUConfigId.convertHandlerToObjC(handler))
  }
  
  /**
  Swift enumeration of ConfigId retrieval results
  
  - Activated: The ConfigId that was retrieved. The object is the same as self but is provided 
    here for easier use.
  - Error:     Error that occured during ConfigId retrieval
  */
  public enum ConfigIdResponse {
    case activated(activeConfig: BUConfigId)
    case error(NSError)
  }
  
  /**
  Swift Internal method for closure conversion
  */
  class internal func convertHandlerToObjC (_ handler: @escaping (_ response:ConfigIdResponse) -> ()) -> BUConfigIdCompletionHandler
  {
    let objCHandler: BUConfigIdCompletionHandler = {(goodConfigId, error) -> Void in
      var properResponse :ConfigIdResponse
      switch (goodConfigId, error) {
      case (_, let e) where e != nil:
        properResponse = ConfigIdResponse.error(e! as NSError)
      default:
        properResponse = ConfigIdResponse.activated (activeConfig: goodConfigId)
      }
      
      handler(properResponse)
    }
    
    return objCHandler
  }
}
